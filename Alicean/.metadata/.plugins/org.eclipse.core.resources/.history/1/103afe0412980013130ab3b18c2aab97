import java.rmi.Naming;

public class Client {
	static String server;
	static int port;
	static String function;
	static int account;
	static int amount;
	
	static Server_Client_Interface scinterface;
	
	public static void main(String[] args)
	{
		String help = "--usage:  <server address:port> <function> <int acnt> <int acnt> <int amnt>";
		server = args[0];
		try { scinterface = (Server_Client_Interface)Naming.lookup(server); }
		catch(Exception e) { System.out.println("Client excpetion:  " + e); }
		function = args[1];
		if (args.length == 2)
		{
			//load test file
			//for each line of text, call function
		} else
		{
			account = 0;
			try { account = Integer.parseInt(args[2]); }
			catch (NumberFormatException e) {
		        System.err.println("Argument 3 must be an integer");
		        System.exit(1);
		    }
			if (args.length == 3)
			{
				if (function.equals("inquiry"))  {
					Client.inquiry(account);
				} else {
					System.err.println(help);
					System.exit(1);
				}
				
				//function = args[2];
				//account = args[3];
			} else if (args.length == 4)
			{
				amount = 0;
				try { amount = Integer.parseInt(args[3]); }
				catch (NumberFormatException e) {
			        System.err.println("Argument 4 must be an integer");
			        System.exit(1);
			    }
				if (function.equals("withdraw")) {
					Client.withdraw(account, amount);
				} else if (function.equals("deposit")) {
					Client.deposit(account, amount);
				} else {
					System.err.println(help);
				}
			} else if (args.length == 5)
			{
				if (function.equals("transfer"))
				{
					int account2 = 0;
					try { account2 = Integer.parseInt(args[3]); }
					catch (NumberFormatException e) {
				        System.err.println("Argument 4 must be an integer");
				        System.exit(1);
				    }
					amount = 0;
					try { amount = Integer.parseInt(args[4]); }
					catch (NumberFormatException e) {
				        System.err.println("Argument 5 must be an integer");
				        System.exit(1);
				    }
					Client.transfer(account, account2, amount);
				}
			}
		}
		
	}
	
	// this operation increases the balance of user account acnt by amt, and returns nothing
	static void deposit(int acnt, int amt)
	{
		try { scinterface.deposit(acnt, amt); }
		catch(Exception e) {}
	}
	// this operation decreases the balance of user account acnt by amt, and returns nothing
	static void withdraw(int acnt, int amt)
	{
		int balance = inquiry(acnt);
		if(balance < amt);
			//error
		else
		{
			try { scinterface.withdraw(acnt, amt); }
			catch(Exception e) {}
		}
	}
	// this operation transfers money with amount of amt from banking account acnt1 to account acnt2
	static void transfer(int acnt1, int acnt2, int amt)
	{
		int balance = inquiry(acnt1);
		if(balance < amt);
			//error
		else
		{
			try { scinterface.transfer(acnt1, acnt2, amt); }
			catch(Exception e) {}
		}
	}
	// this operation returns the balance of user account acnt
	static int inquiry(int acnt)
	{
		return getAmount(acnt);
	}
	
	private void setParameters(String[]args)
	{
		
	}
	private static int getAmount(int acnt)
	{
		int amt = 0;
		try { amt = scinterface.inquiry(acnt); }
		catch(Exception e) {}
		return amt;
	}
}
//}
